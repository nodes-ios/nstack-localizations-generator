//
//  GeneratorTestsData.swift
//  nstack-localizations-generator
//
//  Created by Marius Constantinescu on 29/05/2020.
//  Copyright Â© 2020 Nodes. All rights reserved.
//

import Foundation

struct GeneratorTestsData {
    static let jsonWithDefaultString = """
    {
      "data" : {
        "default" : {
          "successKey" : "Success"
        },
        "oneMoreSection" : {
          "soManyKeys" : "AndValues"
        }
      },
      "meta" : {
        "language" : {
          "direction" : "LRM",
          "id" : 11,
          "is_best_fit" : false,
          "is_default" : true,
          "locale" : "en-GB",
          "name" : "English (UK)"
        },
        "platform" : {
          "id" : 24,
          "slug" : "mobile"
        }
      }
    }
    """

    static let expectedCodeWithDefault = """
    // ----------------------------------------------------------------------\n// File generated by NStack Translations Generator.\n//\n// Copyright (c) 2018 Nodes ApS\n//\n// Permission is hereby granted, free of charge, to any person obtaining\n// a copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to\n// permit persons to whom the Software is furnished to do so, subject to\n// the following conditions:\n//\n// The above copyright notice and this permission notice shall be\n// included in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// ----------------------------------------------------------------------\n\nimport Foundation\nimport LocalizationManager\n\npublic final class Localizations: LocalizableModel {\n    public var oneMoreSection = OneMoreSection()\n    public var defaultSection = DefaultSection()\n\n    enum CodingKeys: String, CodingKey {\n        case oneMoreSection\n        case defaultSection = \"default\"\n    }\n\n    public override init() { super.init() }\n\n    public required init(from decoder: Decoder) throws {\n        super.init()\n        let container = try decoder.container(keyedBy: CodingKeys.self)\n        oneMoreSection = try container.decodeIfPresent(OneMoreSection.self, forKey: .oneMoreSection) ?? oneMoreSection\n        defaultSection = try container.decodeIfPresent(DefaultSection.self, forKey: .defaultSection) ?? defaultSection\n    }\n\n    public override subscript(key: String) -> LocalizableSection? {\n        switch key {\n        case CodingKeys.oneMoreSection.stringValue: return oneMoreSection\n        case CodingKeys.defaultSection.stringValue: return defaultSection\n        default: return nil\n        }\n    }\n\n    public final class OneMoreSection: LocalizableSection {\n        public var soManyKeys = \"\"\n\n        enum CodingKeys: String, CodingKey {\n            case soManyKeys\n        }\n\n        public override init() { super.init() }\n\n        public required init(from decoder: Decoder) throws {\n            super.init()\n            let container = try decoder.container(keyedBy: CodingKeys.self)\n            soManyKeys = try container.decodeIfPresent(String.self, forKey: .soManyKeys) ?? \"__soManyKeys\"\n        }\n\n        public override subscript(key: String) -> String? {\n            switch key {\n            case CodingKeys.soManyKeys.stringValue: return soManyKeys\n            default: return nil\n            }\n        }\n    }\n\n    public final class DefaultSection: LocalizableSection {\n        public var successKey = \"\"\n\n        enum CodingKeys: String, CodingKey {\n            case successKey\n        }\n\n        public override init() { super.init() }\n\n        public required init(from decoder: Decoder) throws {\n            super.init()\n            let container = try decoder.container(keyedBy: CodingKeys.self)\n            successKey = try container.decodeIfPresent(String.self, forKey: .successKey) ?? \"__successKey\"\n        }\n\n        public override subscript(key: String) -> String? {\n            switch key {\n            case CodingKeys.successKey.stringValue: return successKey\n            default: return nil\n            }\n        }\n    }\n}\n\n
    """

    static let jsonWithoutDefaultString = """
    {
      "data" : {
        "oneMoreSection" : {
          "soManyKeys" : "AndValues"
        }
      },
      "meta" : {
        "language" : {
          "direction" : "LRM",
          "id" : 11,
          "is_best_fit" : false,
          "is_default" : true,
          "locale" : "en-GB",
          "name" : "English (UK)"
        },
        "platform" : {
          "id" : 24,
          "slug" : "mobile"
        }
      }
    }
    """

    static let expectedCodeWithoutDefault = """
    // ----------------------------------------------------------------------\n// File generated by NStack Translations Generator.\n//\n// Copyright (c) 2018 Nodes ApS\n//\n// Permission is hereby granted, free of charge, to any person obtaining\n// a copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to\n// permit persons to whom the Software is furnished to do so, subject to\n// the following conditions:\n//\n// The above copyright notice and this permission notice shall be\n// included in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// ----------------------------------------------------------------------\n\nimport Foundation\nimport LocalizationManager\n\npublic final class Localizations: LocalizableModel {\n    public var oneMoreSection = OneMoreSection()\n\n    enum CodingKeys: String, CodingKey {\n        case oneMoreSection\n    }\n\n    public override init() { super.init() }\n\n    public required init(from decoder: Decoder) throws {\n        super.init()\n        let container = try decoder.container(keyedBy: CodingKeys.self)\n        oneMoreSection = try container.decodeIfPresent(OneMoreSection.self, forKey: .oneMoreSection) ?? oneMoreSection\n    }\n\n    public override subscript(key: String) -> LocalizableSection? {\n        switch key {\n        case CodingKeys.oneMoreSection.stringValue: return oneMoreSection\n        default: return nil\n        }\n    }\n\n    public final class OneMoreSection: LocalizableSection {\n        public var soManyKeys = \"\"\n\n        enum CodingKeys: String, CodingKey {\n            case soManyKeys\n        }\n\n        public override init() { super.init() }\n\n        public required init(from decoder: Decoder) throws {\n            super.init()\n            let container = try decoder.container(keyedBy: CodingKeys.self)\n            soManyKeys = try container.decodeIfPresent(String.self, forKey: .soManyKeys) ?? \"__soManyKeys\"\n        }\n\n        public override subscript(key: String) -> String? {\n            switch key {\n            case CodingKeys.soManyKeys.stringValue: return soManyKeys\n            default: return nil\n            }\n        }\n    }\n}\n\n
    """
}
